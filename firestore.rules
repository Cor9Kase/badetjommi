rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Public user profiles
    match /users/{userId} {
      allow read: if true;
      allow create, update, delete: if request.auth != null && request.auth.uid == userId;
    }

    // Bath entries logged or planned by users
    match /baths/{bathId} {
      allow read: if true;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow delete: if request.auth != null && request.auth.uid == resource.data.userId;

      allow update: if request.auth != null && (
        request.auth.uid == resource.data.userId ||
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['reactions']) ||
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['commentCount']) ||
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['reactions', 'commentCount']) || (
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['attendees']) &&
          (
            (
              ('attendees' in resource.data) &&
              (
                request.resource.data.attendees.diff(resource.data.attendees).added().hasOnly([request.auth.uid]) ||
                request.resource.data.attendees.diff(resource.data.attendees).removed().hasOnly([request.auth.uid])
              )
            ) ||
            (
              !('attendees' in resource.data) &&
              (
                request.resource.data.attendees.size() == 1 &&
                request.resource.data.attendees.hasOnly([request.auth.uid])
              )
            )
          )
        )
      );

      match /comments/{commentId} {
        allow read: if true;
        allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
        allow update, delete: if false;
      }
    }

    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
