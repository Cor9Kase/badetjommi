rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check 'attendees' update logic
    function isUpdatingSelfInAttendees() {
      // Use .get() to safely access 'attendees', providing an empty list if it doesn't exist.
      let currentAttendees = resource.data.get('attendees', []);
      let nextAttendees = request.resource.data.attendees;
      let diff = nextAttendees.diff(currentAttendees);
      // Ensure only the current user is being added OR only the current user is being removed.
      return (diff.added().size() == 1 && diff.added()[0] == request.auth.uid && diff.removed().size() == 0) ||
             (diff.removed().size() == 1 && diff.removed()[0] == request.auth.uid && diff.added().size() == 0);
    }

    // Public user profiles
    match /users/{userId} {
      allow read: if true;
      allow create, update, delete: if request.auth != null && request.auth.uid == userId;
    }

    // Bath entries logged or planned by users
    match /baths/{bathId} {
      allow read: if true;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow delete: if request.auth != null && request.auth.uid == resource.data.userId;

      allow update: if request.auth != null && (
        // Allow if user is the owner (Check if this broad permission is intended)
        request.auth.uid == resource.data.userId ||
        // Allow updates only to 'reactions'
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['reactions']) ||
        // Allow updates only to 'commentCount'
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['commentCount']) ||
        // Allow updates only to 'reactions' and 'commentCount'
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['reactions', 'commentCount']) ||
        // Allow updates only to 'attendees' IF the user is adding/removing themselves
        (
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['attendees']) &&
          isUpdatingSelfInAttendees() // Call the function here
        )
      );

      match /comments/{commentId} {
        allow read: if true;
        allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
        allow update, delete: if false;
      }
    }

    // Deny all other access - This is a good practice, but it was commented out.
    // Ensure you uncomment or implement appropriate default denials.
    // match /{document=**} {
    //   allow read, write: if false;
    // }
  }
}
